/*
 * This source file was generated by the Gradle 'init' task
 */
package org.hali;

import com.sun.net.httpserver.HttpServer;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.hali.handler.webhook.WebhookHandler;
import org.hali.http.security.SslSecurityManager;
import org.hali.http.security.TlsConfigurationProvider;
import org.hali.http.server.HttpServerConsts;
import org.hali.http.server.HttpServerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@Slf4j
@SpringBootApplication
@RequiredArgsConstructor
public class App implements CommandLineRunner {

    private final WebhookHandler webhookHandler;
    private final HttpServerFactory httpServerFactory;
    private final SslSecurityManager sslSecurityManager;
    private final TlsConfigurationProvider tlsConfigurationProvider;

    public static void main(String[] args) {
        SpringApplication.run(App.class, args);
    }

    @Override
    public void run(String... args) throws Exception {
        final var host = HttpServerConsts.getDefaultHost();
        final var port = HttpServerConsts.getDefaultPort();

        if (this.tlsConfigurationProvider.isTlsEnabled()) {
            // This is enabled for e2e test, we are using Wiremock (as a server) so we need to define trust store
            // Our app is going to "trust" the remote "wiremock server" in e2e test
            this.sslSecurityManager.enableSsl(
                this.tlsConfigurationProvider.getKeystorePath(),
                this.tlsConfigurationProvider.getKeystorePassword());
        }

        final HttpServer httpServer = this.httpServerFactory.create(host, port);

        httpServer.createContext("/webhook/hali", this.webhookHandler);

        log.info("Http server started on port {}", port);
        httpServer.start();
    }
}
