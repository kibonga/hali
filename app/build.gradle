/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.7/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
  // Apply the application plugin to add support for building a CLI application in Java.
  id 'application'
}

repositories {
  // Use Maven Central for resolving dependencies.
  mavenCentral()
}

dependencies {
  // Use JUnit Jupiter for testing.
  testImplementation libs.junit.jupiter

  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

  // This dependency is used by the application.
  implementation libs.guava

  // Lombok
  compileOnly libs.lombok
  annotationProcessor libs.lombok
  testCompileOnly libs.lombok
  testAnnotationProcessor libs.lombok

  // Logger
  implementation libs.slf4j

  // Jackson
  implementation libs.jackson.databind
  implementation libs.jackson.dataformat

  // Snakeyaml
  implementation libs.snakeyaml

  // Mockito
  testImplementation libs.mockito.core
  testImplementation libs.mockito.junit.jupiter
  testImplementation libs.bytebuddy

  // Spring
  implementation libs.spring.boot.starter
  implementation libs.spring.boot.starter.test
}

// Apply a specific Java toolchain to ease working on different environments.
java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

test {
  jvmArgs = ["-javaagent:${configurations.testRuntimeClasspath.find { it.name.contains("byte-buddy-agent") }.absolutePath}",
             "--add-opens=java.base/java.util.zip=ALL-UNNAMED"]
}

application {
  // Define the main class for the application.
  mainClass = 'org.hali.App'
}

tasks.named('test') {
  // Use JUnit Platform for unit tests.
  useJUnitPlatform()
}
