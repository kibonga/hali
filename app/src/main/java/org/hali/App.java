/*
 * This source file was generated by the Gradle 'init' task
 */
package org.hali;

import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.hali.http.server.HttpServerFactory;
import org.hali.http.server.HttpServerProperties;
import org.hali.security.ssl.TrustStoreConfigurer;
import org.hali.security.ssl.TrustStoreProperties;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@Slf4j
@SpringBootApplication
@RequiredArgsConstructor
public class App implements CommandLineRunner {

    private final HttpHandler webhookHandler;
    private final HttpServerFactory httpServerFactory;
    private final TrustStoreConfigurer trustStoreConfigurer;
    private final TrustStoreProperties trustStoreProperties;
    private final HttpServerProperties httpServerProperties;

    public static void main(String[] args) {
        SpringApplication.run(App.class, args);
    }

    @Override
    public void run(String... args) throws Exception {
        final var host = this.httpServerProperties.getHost();
        final var port = this.httpServerProperties.getPort();

        if (this.trustStoreProperties.isEnable()) {
            // This is enabled for e2e test, we are using Wiremock (as a server) so we need to define trust store
            // Our app is going to "trust" the remote "wiremock server" in e2e test
            this.trustStoreConfigurer.setupTrustStore(this.trustStoreProperties.getKeyStores());
        }

        final HttpServer httpServer = this.httpServerFactory.create(host, port);

        httpServer.createContext("/webhook/handler/pipeline", this.webhookHandler);

        log.info("Http server started on port {}", port);
        httpServer.start();
    }
}
